Memorando: Não existem linguagens de programação melhores que as outras,
existem linguagens que te atendem a determinadas necessidades.

História da linguagem:
	1989: Guido van Rossum

    Intuito → Criar uma linguagem de programação que fosse interpretada mas
    tivesse comandos simples/fáceis de entender. Para ele, em C os
    comandos eram muito extensos.

    Etimologia → Monty Python's Flying Circus (programa de TV favorito dele),
    pois no CWI (colégio que estudou), tinha um padrão em que todos os projetos
    internos eram nomeados com o título de um programa ou algo que remetesse a
    televisão, então quando a editora O'Reilly lançou o primeiro livro, eles
    colocaram a imagem de uma Píton, com isso a eurística pegou.

Benefícios:

    > Produtividade → Fazer muita coisa com poucas linhas de código. Fazer mais
    com menos;
    > Legibilidade → Código escrito é amigável para um outro ser humano;
	> Linguagem de propósito geral → Não é focada em uma determinada coisa;
        Ex: Java é muito voltada para desenvolvimento local/android;
            PHP é voltado pra web;
            R para probabilidade e estatística.
    > Simples, fácil e intuitivo → São comandos em inglês, mas várias palavras
    conhecidas também são;
        Ex: Game, pc etc.
	> Multiplataforma → Ao escrever código no Windows, vai funcionar nos
    outros SO's sem qualquer alteração;
	> Batteries Included → Nem tudo já vem "acoplado" em outras linguagens,
    então o programador perde um tempo importando. Já no python, ele já
    vem com muita coisa instalada (podendo ainda instalar mais).
    Entretanto, com o que ele já vem/sua essência, já é o
    necessário para utilizarmos em nosso dia-a-dia;
	> Livre → Código aberto, faz parte de uma licença livre;
	> Organizada → Na hora de escrever os algoritmos, a posição precisa ser
    toda organizada/indentação. Além de ter seu próprio guia de estilo.
	> Orientada a objetos → Tudo no python são objetos, até uma simples
    variável;
	> Muitas bibliotecas → App para celular/jogo/interface de sistema;
    > Baixo uso de caracteres especiais → Torna-o mais intuitivo;
	> Tem uma filosofia própria → Zen do Python, por Tim Peters.
		>>> import this

Curiosidades:
	> Os crawlers do google são feitos em Python
    > A primeira imagem do buraco negro foi montada embasada em PY, nas
    bibliotecas: Numpy/Scipy/Pandas/Jupyter/Matplotlib/Astropy

Como funciona o interpretador Python?

    Analogia
    Os sujeitos serão:
    → Eu, brasileiro;
    → Ele, chileno.
    Se eu disser: "bom dia", ele não entenderá. Então, temos duas soluções.

    > Ineficiente: Eu pego um dicionário pra procurar o bom dia na língua dele
    e pronunciar, só que isso demoraria muito...

    > Eficiente: "Contratar" um intérprete que saiba os dois idiomas: Português
    e Espanhol. O intérprete basicamente "escutaria" meu bom dia, traduziria e
    pronunciaria em espanhol para o destinatário. Só teria que evitar a gíria
    porque não são todas que o intérprete entende, então deveria falar em um
    tom mais formal.

Vamos mudar a situação agora, replace('Espanhol', 'Computador'), só que no caso
o computador entende apenas linguagem de máquina (Código Binário: 0, 1), esse
intérprete é o meu interpretador (PYTHON), vai fazer essa ponte de comunicação.

Principal vantagem de usar IDLE ao invés do Terminal
	A colorização que ele fornece, o auto-complete que ele oferece em tooltip
    (o contexto, você vai digitando um comando e ele vai te ajudando), salvar
    os scripts.py

Formas de rodar minha script PY:
	1º IDLE: Se trata de uma IDE simples que já vem instalada no próprio Python,
    e que foi desenvolvida usando as bibliotecas nativas da linguagem;
	2º PyCharm: IDE mais robusta por ter várias ferramentas interessantes para
    iniciantes e que facilitam o aprendizado;
	3º Terminal: Considerada a mais prática e elegante em várias situações.
		python <nome_script>.py
		# ou
		sudo chmod +x <nome_script>.py  # Torna executável
		./<nome_script>.py  # Executa
